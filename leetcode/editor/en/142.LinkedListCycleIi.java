  /**
Given the head of a linked list, return the node where the cycle begins. If 
there is no cycle, return null. 

 There is a cycle in a linked list if there is some node in the list that can 
be reached again by continuously following the next pointer. Internally, pos is 
used to denote the index of the node that tail's next pointer is connected to (0-
indexed). It is -1 if there is no cycle. Note that pos is not passed as a 
parameter. 

 Do not modify the linked list. 

 
 Example 1: 
 
 
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the 
second node.
 

 Example 2: 
 
 
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the 
first node.
 

 Example 3: 
 
 
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

 
 Constraints: 

 
 The number of the nodes in the list is in the range [0, 10‚Å¥]. 
 -10‚Åµ <= Node.val <= 10‚Åµ 
 pos is -1 or a valid index in the linked-list. 
 

 
 Follow up: Can you solve it using O(1) (i.e. constant) memory? 

 Related Topics Hash Table Linked List Two Pointers üëç 13718 üëé 975

*/
       
/*
 2024-09-14 00:02:16
*/
  // ÂÆö‰πâÂçïÈìæË°®ËäÇÁÇπÁ±ª
  class ListNode {
      int val;
      ListNode next;
      ListNode(int x) {
          val = x;
          next = null;
      }
  }

class LinkedListCycleIi {


      public static void main(String[] args) {
           Solution solution = new LinkedListCycleIi().new Solution();
          // ÂàõÂª∫Â∏¶ÁéØÈìæË°® [1, 2]ÔºåÂÖ∂‰∏≠ 2 ÊåáÂêë 1
          ListNode head = new ListNode(1);
          ListNode second = new ListNode(2);
          head.next = second;
          second.next = head; // ËøôÈáåÂà∂ÈÄ†‰∫Ü‰∏Ä‰∏™ÁéØ
          ListNode cycleNode = solution.detectCycle(head);
          if (cycleNode != null) {
              System.out.println("Cycle detected at node with value: " + cycleNode.val);
          } else {
              System.out.println("No cycle detected.");
          }

      }


      
      public class TreeNode {
        int val; TreeNode left; TreeNode right;
        TreeNode() {}
        TreeNode(int val) {
            this.val = val;
        }
        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }
       
      //leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution1 {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {// ÊúâÁéØ
                ListNode index1 = fast;
                ListNode index2 = head;
                // ‰∏§‰∏™ÊåáÈíàÔºå‰ªéÂ§¥ÁªìÁÇπÂíåÁõ∏ÈÅáÁªìÁÇπÔºåÂêÑËµ∞‰∏ÄÊ≠•ÔºåÁõ¥Âà∞Áõ∏ÈÅáÔºåÁõ∏ÈÅáÁÇπÂç≥‰∏∫ÁéØÂÖ•Âè£
                while (index1 != index2) {
                    index1 = index1.next;
                    index2 = index2.next;
                }
                return index1;
            }
        }
        return null;
    }
}

public class Solution2 {
    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) {
            return null; // Â¶ÇÊûúÈìæË°®‰∏∫Á©∫ÊàñÂè™Êúâ‰∏Ä‰∏™ËäÇÁÇπÔºåÊó†ÁéØ
        }

        // ÂàùÂßãÂåñÊÖ¢ÊåáÈíàÂíåÂø´ÊåáÈíà
        ListNode slow = head;
        ListNode fast = head;

        // Á¨¨‰∏ÄÈò∂ÊÆµÔºöÂØªÊâæÊòØÂê¶Â≠òÂú®ÁéØ
        while (fast != null && fast.next != null && fast.next.next != null ) {
            slow = slow.next;        // ÊÖ¢ÊåáÈíàÊØèÊ¨°Ëµ∞‰∏§Ê≠•
            fast = fast.next.next.next;   // Âø´ÊåáÈíàÊØèÊ¨°Ëµ∞‰∫îÊ≠•

            if (slow == fast) {     // ÊâæÂà∞Áõ∏ÈÅáÁÇπÔºåË°®Á§∫ÊúâÁéØ
                // Á¨¨‰∫åÈò∂ÊÆµÔºöÂØªÊâæÁéØÁöÑÂÖ•Âè£
                slow = head;        // Â∞ÜÊÖ¢ÊåáÈíàÁßªÂõûËµ∑ÁÇπ
                while (slow != fast) {
                    slow = slow.next;  // ‰∏§‰∏™ÊåáÈíàÊØèÊ¨°ÈÉΩËµ∞‰∏ÄÊ≠•
                    fast = fast.next;
                }
                return slow;  // Áõ∏ÈÅáÁÇπÂ∞±ÊòØÁéØÁöÑÂÖ•Âè£
            }
        }

        return null; // Â¶ÇÊûúÊ≤°ÊúâÁéØÔºåËøîÂõû null
    }
}
    public class Solution {
        public ListNode detectCycle(ListNode head) {
            if (head == null || head.next == null) {
                return null;
            }

            // Á¨¨‰∏ÄÊ≠•ÔºöÊ£ÄÊµãÊòØÂê¶Â≠òÂú®ÁéØ
            ListNode slow = head;
            ListNode fast = head;
            boolean hasCycle = false;

            while (fast != null && fast.next != null && fast.next.next != null) {
                slow = slow.next;
                fast = fast.next.next.next;  // Âø´ÊåáÈíàÊØèÊ¨°Ëµ∞3Ê≠•
                if (slow == fast) {
                    hasCycle = true;
                    break;
                }
            }

            if (!hasCycle) {
                return null;
            }

            // Á¨¨‰∫åÊ≠•ÔºöÊâæÂà∞ÁéØÁöÑÈïøÂ∫¶
            int cycleLength = 1;
            fast = slow.next;
            while (fast != slow) {
                fast = fast.next;
                cycleLength++;
            }

            // Á¨¨‰∏âÊ≠•ÔºöÊâæÂà∞ÁéØÁöÑÂÖ•Âè£
            slow = head;
            fast = head;
            for (int i = 0; i < cycleLength; i++) {
                fast = fast.next;
            }

            while (slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }

            return slow;
        }
    }


//leetcode submit region end(Prohibit modification and deletion)

}